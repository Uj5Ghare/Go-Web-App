name: Go-Web-App Workflow
on:
  push:
    branches: [main, dev]
    paths-ignore:
      - 'helm/**'
      - 'k8s/**'
      - 'terraform/**'
      - 'README.md'
  pull_request:
    types: [synchronize]
  workflow_dispatch:

defaults:
  run:
    shell: bash

permissions:
  actions: read
  contents: read

jobs:

  Code-Quality-Check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.56.2

  SonarQube-Analysis-For-Prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-24.04
    environment: prod
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref}}
    - name:
      run: echo -e ${{ vars.SONAR_PROPERTIES }}  > sonar-project.properties
    - name: Sonar Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  SonarQube-Analysis-For-Dev:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-24.04
    environment: dev
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref}}
    - name:
      run: echo -e ${{ vars.SONAR_PROPERTIES }}  > sonar-project.properties
    - name: Sonar Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  Build-App-For-Prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-24.04
    environment: prod
    needs: [SonarQube-Analysis-For-Prod]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
    - name: Setup Go Environment
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
    - name: Install PM2
      run: npm install -g pm2
    - name: Build
      run: go build -o main .
    - name: Test
      run: go test

  Build-App-For-Dev:
    runs-on: ubuntu-24.04
    environment: dev
    needs: [SonarQube-Analysis-For-Dev]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
    - name: Setup Go Environment
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
    - name: Install PM2
      run: npm install -g pm2
    - name: Build
      run: go build -o main .
    - name: Test
      run: go test

  Image-Vuln-Check-For-Prod:
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/main'
    needs: [Build-App-For-Prod]
    environment: dev
    continue-on-error: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker Image
        run: docker build -t docker.io/${{ vars.DOCKERHUB_USERNAME }}/go-web-app:${{ github.sha }} .
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'docker.io/${{ vars.DOCKERHUB_USERNAME }}/go-web-app:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          output: trivy-report-for-prod.txt
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-for-prod
          path: trivy-report-for-prod.txt

  Image-Vuln-Check-For-Dev:
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/dev'
    needs: [Build-App-For-Dev]
    environment: dev
    continue-on-error: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker Image
        run: docker build -t docker.io/${{ vars.DOCKERHUB_USERNAME }}/go-web-app:${{ github.sha }} .
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'docker.io/${{ vars.DOCKERHUB_USERNAME }}/go-web-app:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          output: trivy-report-for-dev.txt
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-for-dev
          path: trivy-report-for-dev.txt
      
  Push-To-DockerHub-For-Prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-24.04
    environment: prod
    needs: [Image-Vuln-Check-For-Prod]
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/go-web-app:1.${{ github.run_number }}.${{ github.run_attempt}}-prod
  
  Push-To-DockerHub-For-Dev:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-24.04
    environment: prod
    needs: [Image-Vuln-Check-For-Dev]
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/go-web-app:1.${{ github.run_number }}.${{ github.run_attempt}}-dev
  
  Update-Helm-Chart-For-Prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-24.04
    needs: [Push-To-DockerHub-For-Prod]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Update tag in Helm chart
      run: |
        sed -i 's/tag: .*/tag: "1.${{ github.run_number }}.${{ github.run_attempt}}-prod"/' helm/go-web-app-chart/values.yaml
    - name: Commit and push changes
      run: |
        git config --global user.email "ujwal5ghare@gmail.com"
        git config --global user.name "Ujwal Pachghare"
        git add helm/go-web-app-chart/values.yaml
        git commit -m "Update tag in Helm chart"
        git push